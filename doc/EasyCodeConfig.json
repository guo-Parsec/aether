{
  "author" : "guocq",
  "version" : "1.2.7",
  "userSecure" : "",
  "currTypeMapperGroupName" : "Default",
  "currTemplateGroupName" : "Aether",
  "currColumnConfigGroupName" : "Aether",
  "currGlobalConfigGroupName" : "Default",
  "typeMapper" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "matchType" : "REGEX",
        "columnType" : "varchar(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "char(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|medium|long)*text",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "decimal(\\(\\d+,\\d+\\))?",
        "javaType" : "java.math.BigDecimal"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "integer",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|small|medium)*int(\\(\\d+\\))?",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int4",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int8",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "REGEX",
        "columnType" : "bigint(\\(\\d+\\))?",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "date",
        "javaType" : "java.time.LocalDate"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "datetime",
        "javaType" : "java.time.LocalDateTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "timestamp",
        "javaType" : "java.util.Date"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "time",
        "javaType" : "java.time.LocalTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "boolean",
        "javaType" : "java.lang.Boolean"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "bit(1)",
        "javaType" : "java.util.Boolean"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "float",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "double",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "decimal(10)",
        "javaType" : "java.lang.String"
      } ]
    }
  },
  "template" : {
    "Aether" : {
      "name" : "Aether",
      "elementList" : [ {
        "name" : "entity.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/entity\", \".java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"entity\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport lombok.Getter;\nimport lombok.Setter;\nimport top.finder.aether.data.common.entity.BaseDataEntity;\nimport java.util.StringJoiner;\nimport com.baomidou.mybatisplus.annotation.TableName;\n\n##使用宏定义实现类注释信息\n#set($currentClassName = $!{tableInfo.name})\n/**\n * <p>$!{tableInfo.comment}实体信息</p>\n *\n * @author $author\n * @since $!time.currTime('yyyy/MM/dd')\n */\n@Getter\n@Setter\n@TableName(value = \"${tableInfo.obj.name}\")\npublic class $!{currentClassName} extends BaseDataEntity {\n    private static final long serialVersionUID = $!tool.serial();\n    \n#foreach($column in $tableInfo.fullColumn)\n#set($isSuperField = !!${column.ext['is-super-field']})\n#if(!$isSuperField)\n    /**\n     * ${column.comment}\n     */\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n\n#end\n#end\n    @Override\n    public String toString() {\n        return new StringJoiner(\", \", $!{currentClassName}.class.getSimpleName() + \"[\", \"]\")\n#foreach($column in $tableInfo.fullColumn)\n                .add(\"$!{column.name}='\" + $!{column.name} + \"'\")\n#end\n                .toString();\n    }\n}"
      }, {
        "name" : "createDto.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/dto\", \"CreateDto.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"dto\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.Getter;\nimport lombok.Setter;\nimport top.finder.aether.common.model.IModel;\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.NotNull;\nimport java.util.StringJoiner;\n\n##使用宏定义实现类注释信息\n#set($currentEntityName = $!{tableInfo.name})\n#set($currentClassName = $!{currentEntityName} + 'CreateDto')\n#set($index = $!{tableInfo.comment.indexOf('表')})\n#set($newComment = $!{tableInfo.comment.substring(0,$index)})\n#set($currentClassComment = $!{newComment} + '数据创建入参')\n/**\n * <p>$!{currentClassComment}</p>\n *\n * @author $author\n * @since $!time.currTime('yyyy/MM/dd')\n */\n@Getter\n@Setter\n@ApiModel(\"$!{currentClassComment}\")\npublic class $currentClassName implements IModel {\n    private static final long serialVersionUID = $!tool.serial();\n    \n#foreach($column in $tableInfo.fullColumn)\n#set($ext = ${column.ext})\n#set($isShow = !!${ext.create})\n#set($isUnique = ${ext['field-type']} == 'unique')\n#set($isValidNullOrEmpty = ${ext['field-type']} == 'unique' || ${ext['field-type']} == 'notnull')\n#set($columnShortType = $!{tool.getClsNameByFullName($column.type)})\n#set($notNull = $isValidNullOrEmpty && $columnShortType != 'String')\n#set($notEmpty = $isValidNullOrEmpty && $columnShortType == 'String')\n#if($isShow)\n    /**\n     * ${column.comment} $notNull $notEmpty\n     */\n    @ApiModelProperty(value = \"${column.comment}\")\n#if($notEmpty)\n    @NotEmpty(message = \"${column.comment}不能为空\")\n#end\n#if($notNull)\n    @NotNull(message = \"${column.comment}不能为空\")\n#end\n    private $columnShortType $!{column.name};\n\n#end    \n#end  \n    @Override\n    public String toString() {\n        return new StringJoiner(\", \", $!{currentClassName}.class.getSimpleName() + \"[\", \"]\")\n#foreach($column in $tableInfo.fullColumn)\n#set($ext = ${column.ext})\n#set($isShow = !!${ext.create})\n#if($isShow)\n                .add(\"$!{column.name}='\" + $!{column.name} + \"'\")\n#end\n#end\n                .toString();\n    }\n}"
      }, {
        "name" : "updateDto.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/dto\", \"UpdateDto.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"dto\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.Getter;\nimport lombok.Setter;\nimport top.finder.aether.common.model.IModel;\nimport javax.validation.constraints.NotNull;\nimport java.util.StringJoiner;\n##使用宏定义实现类注释信息\n#set($currentEntityName = $!{tableInfo.name})\n#set($currentClassName = $!{currentEntityName} + 'UpdateDto')\n#set($index = $!{tableInfo.comment.indexOf('表')})\n#set($newComment = $!{tableInfo.comment.substring(0,$index)})\n#set($currentClassComment = $!{newComment} + '数据修改入参')\n/**\n * <p>$!{currentClassComment}</p>\n *\n * @author $author\n * @since $!time.currTime('yyyy/MM/dd')\n */\n@Getter\n@Setter\n@ApiModel(\"$!{currentClassComment}\")\npublic class $!{currentClassName} implements IModel {\n    private static final long serialVersionUID = $!tool.serial();\n\n#foreach($column in $tableInfo.fullColumn)\n#set($ext = ${column.ext})\n#set($isShow = !!${ext.update})\n#set($isKey = ${ext['field-type']} == 'primary')\n#if($isShow)\n    /**\n     * ${column.comment}\n     */\n    @ApiModelProperty(value = \"${column.comment}\")\n#if($isKey)\n    @NotNull(message = \"${column.comment}不能为空\")\n#end\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n\n#end    \n#end\n    @Override\n    public String toString() {\n        return new StringJoiner(\", \", $!{currentClassName}.class.getSimpleName() + \"[\", \"]\")\n#foreach($column in $tableInfo.fullColumn)\n#set($ext = ${column.ext})\n#set($isShow = !!${ext.update})\n#if($isShow)\n                .add(\"$!{column.name}='\" + $!{column.name} + \"'\")\n#end\n#end\n                .toString();\n    }\n}"
      }, {
        "name" : "queryDto.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/dto\", \"QueryDto.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"dto\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.Getter;\nimport lombok.Setter;\nimport top.finder.aether.common.model.IModel;\nimport java.util.StringJoiner;\nimport cn.hutool.core.util.ObjectUtil;\nimport cn.hutool.core.util.StrUtil;\nimport java.util.Set;\n##使用宏定义实现类注释信息\n#set($currentEntityName = $!{tableInfo.name})\n#set($currentClassName = $!{currentEntityName} + 'QueryDto')\n#set($index = $!{tableInfo.comment.indexOf('表')})\n#set($newComment = $!{tableInfo.comment.substring(0,$index)})\n#set($currentClassComment = $!{newComment} + '数据查询入参')\n/**\n * <p>$!{currentClassComment}</p>\n *\n * @author $author\n * @since $!time.currTime('yyyy/MM/dd')\n */\n@Getter\n@Setter\n@ApiModel(\"$!{currentClassComment}\")\npublic class $!{currentClassName} implements IModel {\n    private static final long serialVersionUID = $!tool.serial();\n    \n#foreach($column in $tableInfo.fullColumn)\n#set($ext = ${column.ext})\n#set($isShow = !!${ext.list})\n#set($isKey = ${ext['field-type']} == 'primary')\n#if($isShow)\n#set($alias = ${ext['query-alias']})\n#set($userAlias = !!${ext['use-alias-in-query']})\n    /**\n     * ${column.comment}\n     */\n    @ApiModelProperty(value = \"${column.comment}\")\n#set($columnType = $!{tool.getClsNameByFullName($column.type)})\n#set($queryType = ${ext['query-type']})\n#if($queryType == 'in' || $queryType == 'notIn')\n#set($columnType = 'Set<' + $!{tool.getClsNameByFullName($column.type)} + '>')\n#end\n#if(!$userAlias)\n    protected $columnType $!{column.name};\n\n#else\n    protected $columnType $!{alias};\n\n#end\n#end    \n#end\n    /**\n     * <p>获取查询通用wrapper</p>\n     *\n     * @return {@link LambdaQueryWrapper}\n     * @author $author\n     * @date $!time.currTime('yyyy/MM/dd HH:mm')\n     */\n    public LambdaQueryWrapper<$currentEntityName> getCommonWrapper() {\n        LambdaQueryWrapper<$currentEntityName> wrapper = new LambdaQueryWrapper<>();\n#foreach($column in $tableInfo.fullColumn)\n#set($ext = ${column.ext})\n#set($isShow = !!${ext.list})\n#if($isShow)\n#set($isStr = $!{tool.getClsNameByFullName($column.type)} == 'String')\n#set($useTool = 'ObjectUtil.isNotNull')\n#if($isStr)\n#set($useTool = 'StrUtil.isNotBlank')\n#end\n#set($queryType = $ext['query-type'])\n#set($alias = ${ext['query-alias']})\n#set($userAlias = !!${ext['use-alias-in-query']})\n#set($columnName = $!{column.name})\n#if($userAlias)\n#set($columnName = $!{alias})\n#end\n#set($getter = 'get' + $tool.firstUpperCase($columnName))\n#if($queryType == 'eq')\n        wrapper.eq(${useTool}(this.${columnName}), $currentEntityName::$getter, this.${columnName});\n#end\n#if($queryType == 'neq')\n        wrapper.ne(${useTool}(this.${columnName}), $currentEntityName::$getter, this.${columnName});\n#end\n#if($queryType == 'in')\n        wrapper.in(CollUtil.isNotEmpty(this.${columnName}), $currentEntityName::$getter, this.${columnName});\n#end\n#end\n#end\n        return wrapper;\n    }\n    \n    @Override\n    public String toString() {\n        return new StringJoiner(\", \", $!{currentClassName}.class.getSimpleName() + \"[\", \"]\")\n#foreach($column in $tableInfo.fullColumn)\n#set($ext = ${column.ext})\n#set($isShow = !!${ext.update})\n#if($isShow)\n#set($alias = ${ext['query-alias']})\n#set($userAlias = !!${ext['use-alias-in-query']})\n#if(!$userAlias)\n                .add(\"$!{column.name}='\" + $!{column.name} + \"'\")\n#else\n                .add(\"$!{alias}='\" + $!{alias} + \"'\")\n#end\n#end\n#end\n                .toString();\n    }\n}"
      }, {
        "name" : "pageQueryDto.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/dto\", \"PageQueryDto.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"dto\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.Getter;\nimport lombok.Setter;\nimport top.finder.aether.data.common.entity.IPageDto;\nimport java.util.StringJoiner;\n##使用宏定义实现类注释信息\n#set($currentEntityName = $!{tableInfo.name})\n#set($currentQueryDtoName = $!{tableInfo.name} + 'QueryDto')\n#set($currentClassName = $!{currentEntityName} + 'PageQueryDto')\n#set($index = $!{tableInfo.comment.indexOf('表')})\n#set($newComment = $!{tableInfo.comment.substring(0,$index)})\n#set($currentClassComment = $!{newComment} + '数据分页查询入参')\n/**\n * <p>$!{currentClassComment}</p>\n *\n * @author $author\n * @since $!time.currTime('yyyy/MM/dd')\n */\n@Getter\n@Setter\n@ApiModel(\"$!{currentClassComment}\")\npublic class $!{currentClassName} extends $currentQueryDtoName implements IPageDto {\n    private static final long serialVersionUID = $!tool.serial();\n\n    /**\n     * 当前页\n     */\n    @NotNull(message = \"分页查询时当前页不能为空\")\n    @Min(value = 1, message = \"分页查询时当前页不能小于1\")\n    @ApiModelProperty(\"当前页\")\n    private Integer currentPage;\n\n    /**\n     * 页大小\n     */\n    @NotNull(message = \"分页查询时页大小不能为空\")\n    @ApiModelProperty(\"页大小\")\n    @Min(value = 1, message = \"分页查询时页大小不能小于1\")\n    private Integer pageSize;\n    \n        @Override\n    public String toString() {\n        return new StringJoiner(\", \", $!{currentClassName}.class.getSimpleName() + \"[\", \"]\")\n#foreach($column in $tableInfo.fullColumn)\n#set($ext = ${column.ext})\n#set($isShow = !!${ext.update})\n#if($isShow)\n#set($alias = ${ext['query-alias']})\n#set($userAlias = !!${ext['use-alias-in-query']})\n#if(!$userAlias)\n                .add(\"$!{column.name}='\" + $!{column.name} + \"'\")\n#else\n                .add(\"$!{alias}='\" + $!{alias} + \"'\")\n#end\n#end\n#end\n                .add(\"currentPage=\" + currentPage)\n                .add(\"pageSize=\" + pageSize)\n                .toString();\n    }\n}"
      }, {
        "name" : "vo.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/vo\", \"Vo.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"vo\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.Getter;\nimport lombok.Setter;\nimport top.finder.aether.data.common.entity.IPageDto;\nimport java.util.StringJoiner;\nimport top.finder.aether.data.common.vo.BaseDataVo;\n##使用宏定义实现类注释信息\n#set($currentEntityName = $!{tableInfo.name})\n#set($currentClassName = $!{currentEntityName} + 'Vo')\n#set($index = $!{tableInfo.comment.indexOf('表')})\n#set($newComment = $!{tableInfo.comment.substring(0,$index)})\n#set($currentClassComment = $!{newComment} + '数据对外展示层')\n/**\n * <p>$!{currentClassComment}</p>\n *\n * @author $author\n * @since $!time.currTime('yyyy/MM/dd')\n */\n@Getter\n@Setter\n@ApiModel(\"$!{currentClassComment}\")\npublic class $currentClassName extends BaseDataVo {\n    private static final long serialVersionUID = $!tool.serial();\n    \n#foreach($column in $tableInfo.fullColumn)\n#set($ext = ${column.ext})\n#set($isShow = !!${ext.vo})\n#set($isSuperField = !!${ext['is-super-field']})\n#if(!$isSuperField)\n    /**\n     * ${column.comment}\n     */\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n\n#end\n#end  \n    @Override\n    public String toString() {\n        return new StringJoiner(\", \", $!{currentClassName}.class.getSimpleName() + \"[\", \"]\")\n#foreach($column in $tableInfo.fullColumn)\n                .add(\"$!{column.name}='\" + $!{column.name} + \"'\")\n#end\n                .toString();\n    }\n}"
      }, {
        "name" : "converter.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/converter\", \"Converter.java\")\n##使用宏定义设置包后缀\n#setPackageSuffix(\"converter\")\n#set($currentEntityName = $!{tableInfo.name})\n#set($currentClassName = $!{currentEntityName} + 'Converter')\n#set($createDtoClass = $currentEntityName + 'CreateDto')\n#set($updateDtoClass = $currentEntityName + 'UpdateDto')\n#set($voClass = $currentEntityName + 'Vo')\n#set($basePackage = $!{tableInfo.savePackageName})\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport top.finder.aether.common.support.helper.Converter;\nimport ${basePackage}.entity.$currentEntityName;\nimport ${basePackage}.dto.$createDtoClass;\nimport ${basePackage}.dto.$updateDtoClass;\nimport ${basePackage}.vo.$voClass;\n\n##使用宏定义实现类注释信息\n#set($index = $!{tableInfo.comment.indexOf('表')})\n#set($newComment = $!{tableInfo.comment.substring(0,$index)})\n#set($currentClassComment = $!{newComment} + '数据转换类')\n/**\n * <p>$!{currentClassComment}</p>\n *\n * @author $author\n * @since $!time.currTime('yyyy/MM/dd')\n */\n#set($converter = 'Converter')\n#set($createDtoToEntity = 'createDtoToEntity')\n#set($updateDtoToEntity = 'updateDtoToEntity')\n#set($entityToVo = 'entityToVo')\n#set($entityObj = $tool.firstLowerCase($currentEntityName))\n#set($newEntity = $currentEntityName + \" \" + $entityObj + \" = new \" + $currentEntityName + \"();\")\npublic class $currentClassName {\n    /**\n     * <p>{@link $createDtoClass}转换为{@link $currentEntityName}转换器</p>\n     */\n    public static Converter<$createDtoClass, $currentEntityName> $createDtoToEntity$converter = source -> {\n        if (source == null) {\n            return null;\n        }\n        $newEntity\n#foreach($column in $tableInfo.fullColumn)\n#set($ext = ${column.ext})\n#set($isShow = !!${ext.create})\n#if($isShow)\n#set($upFirstName = $tool.firstUpperCase($!{column.name}))\n#set($entitySetter = 'set' + $upFirstName)\n#set($entityGetter = 'get' + $upFirstName + '()')\n        ${entityObj}.${entitySetter}(source.$entityGetter);\n#end\n#end\n        return ${entityObj};\n    };\n    \n    /**\n     * <p>{@link $updateDtoClass}转换为{@link $currentEntityName}转换器</p>\n     */\n    public static Converter<$updateDtoClass, $currentEntityName> $updateDtoToEntity$converter = source -> {\n        if (source == null) {\n            return null;\n        }\n        $newEntity\n#foreach($column in $tableInfo.fullColumn)\n#set($ext = ${column.ext})\n#set($isShow = !!${ext.update})\n#if($isShow)\n#set($upFirstName = $tool.firstUpperCase($!{column.name}))\n#set($entitySetter = 'set' + $upFirstName)\n#set($entityGetter = 'get' + $upFirstName + '()')\n        ${entityObj}.${entitySetter}(source.$entityGetter);\n#end\n#end\n        return ${entityObj};\n    };\n    \n    /**\n     * <p>{@link $currentEntityName}转换为{@link $voClass}转换器</p>\n     */\n    public static Converter<$currentEntityName, $voClass> $entityToVo$converter = source -> {\n        if (source == null) {\n            return null;\n        }\n#set($voObj = $tool.firstLowerCase($voClass))\n        $voClass $voObj = new $voClass();\n#foreach($column in $tableInfo.fullColumn)\n#set($ext = ${column.ext})\n#set($isShow = !!${ext.vo})\n#if($isShow)\n#set($upFirstName = $tool.firstUpperCase($!{column.name}))\n#set($entitySetter = 'set' + $upFirstName)\n#set($entityGetter = 'get' + $upFirstName + '()')\n        $voObj.${entitySetter}(source.$entityGetter);\n#end\n#end\n        return $voObj;\n    };\n    \n    /**\n     * <p>{@link $createDtoClass}转换为{@link $currentEntityName}</p>\n     *\n     * @param dto {@link $createDtoClass} 入参\n     * @return {@link $currentEntityName}\n     * @author $author\n     * @date $!time.currTime('yyyy/MM/dd HH:mm')\n     */\n    public static $currentEntityName $createDtoToEntity($createDtoClass dto) {\n        return ${createDtoToEntity}${converter}.convert(dto);\n    }\n    \n    /**\n     * <p>{@link $updateDtoClass}转换为{@link $currentEntityName}</p>\n     *\n     * @param dto {@link $updateDtoClass} 入参\n     * @return {@link $currentEntityName}\n     * @author $author\n     * @date $!time.currTime('yyyy/MM/dd HH:mm')\n     */\n    public static $currentEntityName $updateDtoToEntity($updateDtoClass dto) {\n        return ${updateDtoToEntity}${converter}.convert(dto);\n    }\n    \n    /**\n     * <p>{@link $currentEntityName}转换为{@link $voClass}</p>\n     *\n     * @param entity {@link $currentEntityName} 入参\n     * @return {@link $voClass}\n     * @author $author\n     * @date $!time.currTime('yyyy/MM/dd HH:mm')\n     */\n    public static $voClass $entityToVo($currentEntityName entity) {\n        return ${entityToVo}${converter}.convert(entity);\n    }\n}"
      }, {
        "name" : "mapper.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/mapper\", \"Mapper.java\")\n##使用宏定义设置包后缀\n#setPackageSuffix(\"mapper\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\n#set($currentEntityName = $!{tableInfo.name})\n#set($basePackage = $!{tableInfo.savePackageName})\nimport top.finder.aether.data.common.mapper.CommonMapper;\nimport ${basePackage}.entity.$currentEntityName;\n##使用宏定义实现类注释信息\n#set($index = $!{tableInfo.comment.indexOf('表')})\n#set($newComment = $!{tableInfo.comment.substring(0,$index)})\n#set($currentClassComment = $!{newComment} + 'Mapper')\n/**\n * <p>$!{currentClassComment}</p>\n *\n * @author $author\n * @since $!time.currTime('yyyy/MM/dd')\n */\n public interface ${currentEntityName}Mapper extends CommonMapper<$currentEntityName> {\n }"
      }, {
        "name" : "service.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/service\", \"Service.java\")\n##使用宏定义设置包后缀\n#setPackageSuffix(\"service\")\n\n##使用全局变量实现默认包导入\n#set($currentEntityName = $!{tableInfo.name})\n#set($basePackage = $!{tableInfo.savePackageName})\nimport com.baomidou.mybatisplus.core.metadata.IPage;\n#set($voClass = $currentEntityName + 'Vo')\n#set($createDtoClass = $currentEntityName + 'CreateDto')\n#set($updateDtoClass = $currentEntityName + 'UpdateDto')\n#set($queryDtoClass = $currentEntityName + 'QueryDto')\n#set($pageQueryDtoClass = $currentEntityName + 'PageQueryDto')\nimport ${basePackage}.dto.*;\nimport ${basePackage}.entity.$currentEntityName;\nimport ${basePackage}.vo.$voClass;\nimport java.util.List;\nimport java.util.Set;\n##使用宏定义实现类注释信息\n#set($index = $!{tableInfo.comment.indexOf('表')})\n#set($newComment = $!{tableInfo.comment.substring(0,$index)})\n#set($currentClassComment = $!{newComment} + '服务接口')\n/**\n * <p>$!{currentClassComment}</p>\n *\n * @author $author\n * @since $!time.currTime('yyyy/MM/dd')\n */\npublic interface ${currentEntityName}Service {\n    /**\n     * <p>新增：$!{newComment}</p>\n     *\n     * @param dto 新增入参\n     * @author $author\n     * @date $!time.currTime('yyyy/MM/dd HH:mm')\n     */\n    void create($createDtoClass dto);\n\n    /**\n     * <p>批量删除：$!{newComment}</p>\n     *\n     * @param idSet 主键集合\n     * @author $author\n     * @date $!time.currTime('yyyy/MM/dd HH:mm')\n     */\n    void delete(Set<Long> idSet);\n\n    /**\n     * <p>更新：$!{newComment}</p>\n     *\n     * @param dto 更新入参\n     * @author $author\n     * @date $!time.currTime('yyyy/MM/dd HH:mm')\n     */\n    void update($updateDtoClass dto);\n\n    /**\n     * <p>查询：$!{newComment}列表</p>\n     *\n     * @param dto 查询入参\n     * @return {@link List}\n     * @author $author\n     * @date $!time.currTime('yyyy/MM/dd HH:mm')\n     */\n    List<$voClass> listQuery($queryDtoClass dto);\n\n    /**\n     * <p>分页查询：$!{newComment}</p>\n     *\n     * @param dto 参数\n     * @return {@link IPage}\n     * @author $author\n     * @date $!time.currTime('yyyy/MM/dd HH:mm')\n     */\n    IPage<$voClass> pageQuery($pageQueryDtoClass dto);\n}"
      }, {
        "name" : "serviceImpl.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/service/impl\", \"ServiceImpl.java\")\n##使用宏定义设置包后缀\n#setPackageSuffix(\"service.impl\")\n\n##使用全局变量实现默认包导入\n#set($currentEntityName = $!{tableInfo.name})\n#set($basePackage = $!{tableInfo.savePackageName})\n#set($voClass = $currentEntityName + 'Vo')\n#set($createDtoClass = $currentEntityName + 'CreateDto')\n#set($updateDtoClass = $currentEntityName + 'UpdateDto')\n#set($queryDtoClass = $currentEntityName + 'QueryDto')\n#set($pageQueryDtoClass = $currentEntityName + 'PageQueryDto')\nimport cn.hutool.core.collection.CollUtil;\nimport cn.hutool.core.util.StrUtil;\nimport com.baomidou.mybatisplus.core.conditions.Wrapper;\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.cache.annotation.CacheEvict;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport top.finder.aether.common.utils.LoggerUtil;\nimport top.finder.aether.data.core.support.helper.PageHelper;\nimport ${basePackage}.converter.${currentEntityName}Converter;\nimport ${basePackage}.dto.*;\nimport ${basePackage}.entity.${currentEntityName};\nimport ${basePackage}.mapper.${currentEntityName}Mapper;\nimport ${basePackage}.service.${currentEntityName}Service;\nimport ${basePackage}.vo.${currentEntityName}Vo;\n\nimport javax.annotation.Resource;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n#set($array = $!{tableInfo.obj.name.split(\"_\")})\n#set($lastIndex = ${array.size()} - 1)\n#set($lastName = ${array.get(${lastIndex})})\n##使用宏定义实现类注释信息\n#set($index = $!{tableInfo.comment.indexOf('表')})\n#set($newComment = $!{tableInfo.comment.substring(0,$index)})\n#set($currentClassComment = $!{newComment} + '服务接口实现类')\n\n/**\n * <p>$!{currentClassComment}</p>\n *\n * @author $author\n * @since $!time.currTime('yyyy/MM/dd')\n */\n@Service(value = \"$tool.firstLowerCase(${currentEntityName})Service\")\npublic class ${currentEntityName}ServiceImpl implements ${currentEntityName}Service {\n    private static final Logger log = LoggerFactory.getLogger(${currentEntityName}ServiceImpl.class);\n    \n    @Resource\n    private ${currentEntityName}Mapper mapper;\n\n#set($createDtoObj = $tool.firstLowerCase(${currentEntityName}))    \n#set($converterClass = ${currentEntityName} + 'Converter')\n    /**\n     * <p>新增：$!{newComment}</p>\n     *\n     * @param dto 新增入参\n     * @author $author\n     * @date $!time.currTime('yyyy/MM/dd HH:mm')\n     */\n    @Override\n    @CacheEvict(cacheNames = {P_${lastName.toUpperCase()}}, allEntries = true)\n    @Transactional(rollbackFor = Exception.class)\n    public void create($createDtoClass dto) {\n        log.debug(\"新增$!{newComment}, 入参={}\", dto);\n        checkBeforeCreate(dto);\n        ${currentEntityName} $createDtoObj = ${converterClass}.createDtoToEntity(dto);\n        mapper.insert($createDtoObj);\n        log.debug(\"新增$!{newComment}成功\");\n    }\n    \n    /**\n     * <p>批量删除：$!{newComment}</p>\n     *\n     * @param idSet 主键集合\n     * @author $author\n     * @date $!time.currTime('yyyy/MM/dd HH:mm')\n     */\n    @Override\n    @CacheEvict(cacheNames = {P_${lastName.toUpperCase()}}, allEntries = true)\n    @Transactional(rollbackFor = Exception.class)\n    public void delete(Set<Long> idSet) {\n        log.debug(\"删除$!{newComment}, 入参={}\", idSet);\n        checkBeforeDelete(idSet);\n        mapper.logicBatchDeleteByIds(idSet, System.currentTimeMillis());\n        log.debug(\"删除$!{newComment}成功\");\n    }\n    \n    /**\n     * <p>更新：$!{newComment}</p>\n     *\n     * @param dto 更新入参\n     * @author $author\n     * @date $!time.currTime('yyyy/MM/dd HH:mm')\n     */\n    @Override\n    @CacheEvict(cacheNames = {P_${lastName.toUpperCase()}}, allEntries = true)\n    @Transactional(rollbackFor = Exception.class)\n    public void update($updateDtoClass dto) {\n        log.debug(\"更新$!{newComment}, 入参={}\", dto);\n        checkBeforeUpdate(dto);\n        ${currentEntityName} $createDtoObj = ${converterClass}.updateDtoToEntity(dto);\n        mapper.insert($createDtoObj);\n        log.debug(\"更新$!{newComment}成功\");\n    }\n    \n    /**\n     * <p>查询：$!{newComment}列表</p>\n     *\n     * @param dto 查询入参\n     * @return {@link List}\n     * @author $author\n     * @date $!time.currTime('yyyy/MM/dd HH:mm')\n     */\n    @Override\n    @Cacheable(cacheNames = M_VO_${lastName.toUpperCase()}, keyGenerator = \"modelKeyGenerator\", unless = \"#result.isEmpty()\")\n    public List<$voClass> listQuery($queryDtoClass dto) {\n        List<$currentEntityName> ${createDtoObj}List = mapper.selectList(dto.getCommonWrapper());\n        return ${createDtoObj}List.stream().map(${converterClass}::entityToVo).collect(Collectors.toList());\n    }\n    \n    /**\n     * <p>分页查询：$!{newComment}</p>\n     *\n     * @param dto 参数\n     * @return {@link IPage}\n     * @author $author\n     * @date $!time.currTime('yyyy/MM/dd HH:mm')\n     */\n    @Override\n    public IPage<$voClass> pageQuery($pageQueryDtoClass dto) {\n        IPage<$currentEntityName> page = PageHelper.initPage(dto);\n        page = mapper.selectPage(page, dto.getCommonWrapper());\n        return page.convert(${converterClass}::entityToVo);\n    }\n\n#set($uniqueColumnMap = [])    \n#foreach($column in $tableInfo.fullColumn)\n#set($ext = $column.ext)\n#if(${ext['field-type']} == 'unique')\n#set($columnName = $column.name)\n#set($getter = 'get' + $tool.firstUpperCase($column.name))\n#set($type = $!{tool.getClsNameByFullName($column.type)})\n#if($uniqueColumnMap.add({'name': $columnName, 'getter':$getter, 'type':$type, 'comment':$column.comment}))\n#end\n#end\n#end\n    /**\n     * <p>新增$!{newComment}前校验</p>\n     *\n     * @param dto 新增入参\n     * @author $author\n     * @date $!time.currTime('yyyy/MM/dd HH:mm')\n     */\n    private void checkBeforeCreate($createDtoClass dto) {\n#foreach($unique in $uniqueColumnMap)\n        $unique.type $unique.name = dto.${unique.getter}();\n#end\n        LambdaQueryWrapper<${currentEntityName}> wrapper = new LambdaQueryWrapper<${currentEntityName}>();\n#foreach($unique in $uniqueColumnMap) \n        wrapper.eq(${currentEntityName}::${unique.getter}, $unique.name);\n#end\n        boolean exists = mapper.exists(wrapper);\n#set($message = '')\n#set($param = '')\n#foreach($unique in $uniqueColumnMap)\n#if(${foreach.index} == 0)\n#set($message = $unique.comment + '为[' + $unique.name + '={}]')\n#set($param = $unique.name)\n#else\n#set($message = $message + '以及' + $unique.comment + '为[' + $unique.name + '={}]')\n#set($param = $param + \", \" + $unique.name)\n#end\n#end\n#set($message = $message + '的数据已存在，不能重复新增')\n        if (exists) {\n            throw LoggerUtil.logAetherValidError(log, \"$message\", $param);\n        }\n    }\n    \n    /**\n     * <p>删除$!{newComment}前校验</p>\n     *\n     * @param idSet 主键集合\n     * @author $author\n     * @date $!time.currTime('yyyy/MM/dd HH:mm')\n     */\n    private void checkBeforeDelete(Set<Long> idSet) {\n        if (CollUtil.isEmpty(idSet)) {\n            throw LoggerUtil.logAetherValidError(log, \"删除时主键集合不能为空\", idSet);\n        }\n        LambdaQueryWrapper<${currentEntityName}> wrapper = new LambdaQueryWrapper<${currentEntityName}>()\n                .in(${currentEntityName}::getId, idSet);\n        Long count = mapper.selectCount(wrapper);\n        int size = idSet.size();\n        if (count == 0) {\n            throw LoggerUtil.logAetherValidError(log, \"不存在需要删除的数据[idSet={}]\", idSet);\n        }\n        if (count < size) {\n            log.warn(\"待删除的idSet={}中部分主键不存在无法删除，系统将删除已存在的数据{}条\", idSet, count);\n        }   \n    }\n    \n    /**\n     * <p>更新$!{newComment}前校验</p>\n     *\n     * @param dto 更新入参\n     * @author $author\n     * @date $!time.currTime('yyyy/MM/dd HH:mm')\n     */\n    private void checkBeforeUpdate($updateDtoClass dto) {\n        Long id = dto.getId();\n        LambdaQueryWrapper<${currentEntityName}> wrapper = new LambdaQueryWrapper<${currentEntityName}>()\n                .eq(${currentEntityName}::getId, id);\n        boolean exists = mapper.exists(wrapper);\n        if (!exists) {\n            throw LoggerUtil.logAetherValidError(log, \"主键为[id={}]的数据不存在，不能进行更新维护\", id);\n        }\n#foreach($unique in $uniqueColumnMap)\n        $unique.type $unique.name = dto.${unique.getter}();\n#end\n        wrapper = new LambdaQueryWrapper<${currentEntityName}>();\n        wrapper.ne(${currentEntityName}::getId, id);\n        boolean checkUnique = false;\n#foreach($unique in $uniqueColumnMap)\n#set($toolName = 'ObjectUtil.isNotNull')\n#if($unique.type == 'String')\n#set($toolName = 'StrUtil.isNotBlank')\n#end\n        if (${toolName}($unique.name)) {\n            checkUnique = true;\n            wrapper.eq(${currentEntityName}::$unique.getter, $unique.name);\n        }\n#end\n       if (checkUnique) {\n            exists = mapper.exists(wrapper);\n#set($message = '')\n#set($param = '')\n#foreach($unique in $uniqueColumnMap)\n#if(${foreach.index} == 0)\n#set($message = $unique.comment + '为[' + $unique.name + '={}]')\n#set($param = $unique.name)\n#else\n#set($message = $message + '以及' + $unique.comment + '为[' + $unique.name + '={}]')\n#set($param = $param + \", \" + $unique.name)\n#end\n#end\n#set($message = $message + '的数据已存在，不能重复更新')\n            if (exists) {\n                throw LoggerUtil.logAetherValidError(log, \"$message\", $param);\n            }\n       }     \n    }\n}"
      }, {
        "name" : "cacheConstantPool.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n#set($array = $!{tableInfo.obj.name.split(\"_\")})\n#set($lastIndex = ${array.size()} - 1)\n#set($lastName = ${array.get(${lastIndex})})\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/support/pool/${lastName}\", \"CacheConstantPool.java\")\n##使用宏定义设置包后缀\n#setPackageSuffix(\"support.pool.${lastName}\")\n\nimport static top.finder.aether.common.support.pool.CommonConstantPool.REDIS_KEY_SEPARATOR;\nimport static top.finder.aether.data.cache.support.pool.CacheConstantPool.CACHE_RESULT_MULTIPLE;\nimport static top.finder.aether.data.cache.support.pool.CacheConstantPool.CACHE_RESULT_SINGLE;\nimport static top.finder.aether.system.api.support.pool.SystemCacheConstantPool.*;\n\n##使用宏定义实现类注释信息\n#set($index = $!{tableInfo.comment.indexOf('表')})\n#set($newComment = $!{tableInfo.comment.substring(0,$index)})\n#set($currentClassComment = $!{newComment} + '缓存常量池')\n#set($currentEntityName = $!{tableInfo.name})\n#set($basePackage = $!{tableInfo.savePackageName})\n/**\n * <p>$!{currentClassComment}</p>\n *\n * @author $author\n * @since $!time.currTime('yyyy/MM/dd')\n */\npublic interface ${currentEntityName}CacheConstantPool {\n#set($upLastName = ${lastName.toUpperCase()})\n    /**\n     * ${lastName}业务\n     */\n    String B_$upLastName = \"${lastName}\";\n    \n    /**\n     * ${lastName}业务统一前缀\n     */\n    String P_$upLastName = PREFIX + REDIS_KEY_SEPARATOR + B_$upLastName;\n\n    /**\n     * ${lastName}业务vo结果集统一前缀\n     */\n    String P_VO_$upLastName = P_$upLastName + REDIS_KEY_SEPARATOR + P_VO;\n\n    /**\n     * ${lastName}业务optional-vo结果集统一前缀\n     */\n    String P_OVO_$upLastName = P_$upLastName + REDIS_KEY_SEPARATOR + P_OVO;\n\n    /**\n     * ${lastName}业务holder结果集统一前缀\n     */\n    String P_HO_$upLastName = P_$upLastName + REDIS_KEY_SEPARATOR + P_HO;\n\n    /**\n     * ${lastName}业务optional-holder结果集统一前缀\n     */\n    String P_OHO_$upLastName = P_$upLastName + REDIS_KEY_SEPARATOR + P_OHO;\n\n    /**\n     * ${lastName}业务vo单条结果缓存名称\n     */\n    String S_VO_$upLastName = P_VO_$upLastName + REDIS_KEY_SEPARATOR + CACHE_RESULT_SINGLE;\n\n    /**\n     * ${lastName}业务optional<vo>单条结果缓存名称\n     */\n    String S_OVO_$upLastName = P_OVO_$upLastName + REDIS_KEY_SEPARATOR + CACHE_RESULT_SINGLE;\n\n    /**\n     * ${lastName}业务vo多条结果缓存名称\n     */\n    String M_VO_$upLastName = P_VO_$upLastName + REDIS_KEY_SEPARATOR + CACHE_RESULT_MULTIPLE;\n\n    /**\n     * ${lastName}业务holder单条结果缓存名称\n     */\n    String S_HO_$upLastName = P_HO_$upLastName + REDIS_KEY_SEPARATOR + CACHE_RESULT_SINGLE;\n\n    /**\n     * ${lastName}业务optional<holder>单条结果缓存名称\n     */\n    String S_OHO_$upLastName = P_OHO_$upLastName + REDIS_KEY_SEPARATOR + CACHE_RESULT_SINGLE;\n\n    /**\n     * ${lastName}业务holder多条结果缓存名称\n     */\n    String M_HO_$upLastName = P_HO_$upLastName + REDIS_KEY_SEPARATOR + CACHE_RESULT_MULTIPLE;\n}"
      }, {
        "name" : "controller.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/controller\", \"Controller.java\")\n##使用宏定义设置包后缀\n#setPackageSuffix(\"controller\")\n\n##使用全局变量实现默认包导入\n#set($currentEntityName = $!{tableInfo.name})\n#set($basePackage = $!{tableInfo.savePackageName})\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\nimport top.finder.aether.system.api.support.pool.SystemApiConstantPool;\nimport ${basePackage}.dto.${currentEntityName}CreateDto;\nimport ${basePackage}.dto.${currentEntityName}UpdateDto;\nimport ${basePackage}.entity.${currentEntityName};\nimport ${basePackage}.service.${currentEntityName}Service;\nimport ${basePackage}.vo.${currentEntityName}Vo;\nimport top.finder.aether.common.support.api.Apis;\n#set($array = $!{tableInfo.obj.name.split(\"_\")})\n#set($lastIndex = ${array.size()} - 1)\n#set($lastName = ${array.get(${lastIndex})})\n\nimport java.util.List;\nimport java.util.Set;\n##使用宏定义实现类注释信息\n#set($index = $!{tableInfo.comment.indexOf('表')})\n#set($newComment = $!{tableInfo.comment.substring(0,$index)})\n#set($currentClassComment = $!{newComment} + '控制器')\n/**\n * <p>$!{currentClassComment}</p>\n *\n * @author $author\n * @since $!time.currTime('yyyy/MM/dd')\n */\n@Api(tags = \"$!{currentClassComment}\")\n@RestController\n#set($upLastName = ${lastName.toUpperCase()})\n@RequestMapping(value = SystemApiConstantPool.${upLastName}_WEB_API_PREFIX)\npublic class ${currentEntityName}Controller {\n    private final ${currentEntityName}Service service;\n    \n    public ${currentEntityName}Controller(${currentEntityName}Service service) {\n        this.service = service;\n    }\n    \n    @ApiOperation(value = \"新增$!{newComment}\", notes = \"$!{newComment}新增操作\")\n    @PostMapping(value = \"/create.do\")\n    public Apis<Void> create(@RequestBody @Validated ${currentEntityName}CreateDto dto) {\n        service.create(dto);\n        return Apis.success();\n    }\n    \n    @ApiOperation(value = \"删除$!{newComment}\", notes = \"$!{newComment}删除操作\")\n    @DeleteMapping(value = \"/delete.do\")\n    public Apis<Void> delete(@RequestBody @Validated Set<Long> idSet) {\n        service.delete(idSet);\n        return Apis.success();\n    }\n    \n    @ApiOperation(value = \"更新$!{newComment}\", notes = \"$!{newComment}更新操作\")\n    @PutMapping(value = \"/update.do\")\n    public Apis<Void> update(@RequestBody @Validated ${currentEntityName}UpdateDto dto) {\n        service.update(dto);\n        return Apis.success();\n    }\n    \n    @ApiOperation(value = \"查询$!{newComment}列表\", notes = \"$!{newComment}列表信息查询\")\n    @GetMapping(value = \"/list\")\n    public Apis<List<${currentEntityName}Vo>> list(${currentEntityName}QueryDto dto) {\n        return Apis.success(service.listQuery(dto));\n    }\n    \n    @ApiOperation(value = \"分页查询$!{newComment}列表\", notes = \"$!{newComment}列表信息分页查询\")\n    @GetMapping(value = \"/page/query\")\n    public Apis<IPage<${currentEntityName}Vo>> page(${currentEntityName}PageQueryDto dto) {\n        return Apis.success(service.pageQuery(dto));\n    }\n}"
      }, {
        "name" : "mapper.xml.vm",
        "code" : "##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Mapper.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao\">\n    #set($resultMapName = $!{tableInfo.name}+\"ResultMap\")\n    <resultMap id=\"${resultMapName}\" type=\"$!{tableInfo.savePackageName}.domain.entity.$!{tableInfo.name}\">\n        <!--@Table $!{tableInfo.obj.name}-->\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n    #set($sqlId = $!{tableInfo.obj.name}+\"_columns\")\n    #set($simpleName = \"\")#foreach($str in $!{tableInfo.obj.name.split(\"_\")})#set($simpleName = $simpleName+$str.substring(0,1))#end\n\n</mapper>"
      } ]
    }
  },
  "columnConfig" : {
    "Aether" : {
      "name" : "Aether",
      "elementList" : [ {
        "title" : "is-super-field",
        "type" : "BOOLEAN"
      }, {
        "title" : "query-alias",
        "type" : "TEXT",
        "selectValue" : "null"
      }, {
        "title" : "query-type",
        "type" : "SELECT",
        "selectValue" : "eq,neq,like,notlike,in,notin,bewteen,lt,le,gt,ge"
      }, {
        "title" : "create",
        "type" : "BOOLEAN"
      }, {
        "title" : "update",
        "type" : "BOOLEAN"
      }, {
        "title" : "list",
        "type" : "BOOLEAN"
      }, {
        "title" : "vo",
        "type" : "BOOLEAN"
      }, {
        "title" : "field-type",
        "type" : "SELECT",
        "selectValue" : "unique,primary,notnull,notempty"
      }, {
        "title" : "use-alias-in-query",
        "type" : "BOOLEAN"
      } ]
    }
  },
  "globalConfig" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "name" : "autoImport.vm",
        "value" : "##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"
      }, {
        "name" : "define.vm",
        "value" : "##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"
      }, {
        "name" : "init.vm",
        "value" : "##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"book_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"
      }, {
        "name" : "mybatisSupport.vm",
        "value" : "##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end\n"
      } ]
    }
  }
}